version: 0.2

# RagTime CodeBuild Pipeline
# Builds, tests, and deploys the RagTime CDK infrastructure stack
# Foundation CI/CD pipeline for Milestone 1
# Enhanced with detailed GitHub status reporting

env:
  variables:
    NODE_ENV: production
    AWS_DEFAULT_REGION: us-east-1
  exported-variables:
    - AWS_REGION
    - AWS_DEFAULT_REGION
    - AWS_ACCOUNT_ID
    - CODEBUILD_BUILD_ID

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      # Create shared functions file for GitHub status reporting
      - |
        cat > /tmp/github_functions.sh << 'EOFFUNC'
        # Function to get GitHub repository info from CodeBuild environment
        get_github_info() {
          if [ -n "$CODEBUILD_SOURCE_VERSION" ]; then
            export GITHUB_SHA="$CODEBUILD_SOURCE_VERSION"
          fi
          
          # Extract owner and repo from source location
          if [ -n "$CODEBUILD_SOURCE_REPO_URL" ]; then
            export GITHUB_REPO=$(echo "$CODEBUILD_SOURCE_REPO_URL" | sed 's/.*github\.com[/:]\([^/]*\/[^/]*\)\.git.*/\1/')
          else
            export GITHUB_REPO="BayGullAI/RagTime"
          fi
          
          echo "GitHub Repository: $GITHUB_REPO"
          echo "GitHub SHA: $GITHUB_SHA"
        }
        
        # Function to post GitHub status
        post_github_status() {
          local state="$1"
          local context="$2"
          local description="$3"
          local target_url="$4"
          
          # Get GitHub token from SSM if available
          GITHUB_TOKEN=$(aws ssm get-parameter --name "/ragtime/github-token" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          
          if [ -n "$GITHUB_TOKEN" ] && [ -n "$GITHUB_SHA" ] && [ -n "$GITHUB_REPO" ]; then
            echo "Posting GitHub status: $context - $state - $description"
            
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$GITHUB_REPO/statuses/$GITHUB_SHA" \
              -d "{
                \"state\": \"$state\",
                \"context\": \"$context\",
                \"description\": \"$description\",
                \"target_url\": \"$target_url\"
              }" || echo "Failed to post GitHub status"
          else
            echo "GitHub status posting not available (missing token, SHA, or repo info)"
          fi
        }
        
        # Function to get CloudWatch logs URL
        get_logs_url() {
          local region="$AWS_DEFAULT_REGION"
          local log_group="/aws/codebuild/ragtime-pipeline"
          local log_stream="$CODEBUILD_BUILD_ID"
          echo "https://console.aws.amazon.com/cloudwatch/home?region=$region#logsV2:log-groups/log-group/\$252Faws\$252Fcodebuild\$252Fragtime-pipeline/log-events/$log_stream"
        }
        EOFFUNC
        
        # Source functions and initialize
        source /tmp/github_functions.sh
        get_github_info
        
        # Post initial status
        LOGS_URL=$(get_logs_url)
        post_github_status "pending" "ci/ragtime/install" "Installing dependencies and tools..." "$LOGS_URL"
      
      - echo "Installing dependencies..."
      - echo "Installing CDK globally..."
      - npm install -g aws-cdk@latest
      - echo "Node.js version:" && node --version
      - echo "NPM version:" && npm --version
      - echo "CDK version:" && cdk --version
      - echo "Setting CDK environment variables..."
      - export CDK_DEFAULT_ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
      - export CDK_DEFAULT_REGION=$AWS_REGION
      - echo "CDK Account $CDK_DEFAULT_ACCOUNT, Region $CDK_DEFAULT_REGION"
      
      # Report install phase success
      - |
        source /tmp/github_functions.sh
        get_github_info
        LOGS_URL=$(get_logs_url)
        post_github_status "success" "ci/ragtime/install" "‚úÖ Dependencies installed successfully" "$LOGS_URL"
      
  pre_build:
    commands:
      # Start pre-build phase reporting
      - |
        source /tmp/github_functions.sh
        get_github_info
        LOGS_URL=$(get_logs_url)
        post_github_status "pending" "ci/ragtime/pre-build" "üîç Running validations and tests..." "$LOGS_URL"
      
      - echo "Running pre-build validations..."
      - echo "Build started on `date`"
      - echo "Current directory:" && pwd
      - echo "AWS Region:" && echo $AWS_REGION
      - echo "CodeBuild Build ID:" && echo $CODEBUILD_BUILD_ID
      
      # Validate AWS credentials
      - echo "=== CREDENTIAL VERIFICATION ==="
      - echo "AWS CLI credentials:"
      - aws sts get-caller-identity
      - echo "Testing S3 access (needed for SAM deployments):"
      - aws s3 ls || echo "S3 access test completed"
      - echo "Testing CloudFormation access:"
      - aws cloudformation list-stacks --max-items 1 || echo "CloudFormation access test completed"
      
      # Install project dependencies if any
      - |
        if [ -f "package.json" ]; then
          echo "Installing Node.js dependencies..."
          if [ -f "package-lock.json" ]; then
            npm ci
          else
            npm install
          fi
        fi
      
      # Run linting if configured
      - |
        source /tmp/github_functions.sh
        get_github_info
        LOGS_URL=$(get_logs_url)
        post_github_status "pending" "ci/ragtime/lint" "üîç Running code quality checks..." "$LOGS_URL"
        
        if [ -f "package.json" ] && npm run lint --silent 2>/dev/null; then
          echo "Running lint checks..."
          if npm run lint; then
            post_github_status "success" "ci/ragtime/lint" "‚úÖ Code quality checks passed" "$LOGS_URL"
          else
            post_github_status "failure" "ci/ragtime/lint" "‚ùå Code quality checks failed" "$LOGS_URL"
            exit 1
          fi
        else
          echo "No linting configured yet - will be added in future issues"
          post_github_status "success" "ci/ragtime/lint" "‚ö†Ô∏è Linting not configured (skipped)" "$LOGS_URL"
        fi
      
      # Run tests if configured
      - post_github_status "pending" "ci/ragtime/test" "üß™ Running test suite..." "$LOGS_URL"
      - |
        if [ -f "package.json" ] && npm run test --silent 2>/dev/null; then
          echo "Running test suite..."
          if npm run test; then
            post_github_status "success" "ci/ragtime/test" "‚úÖ All tests passed" "$LOGS_URL"
          else
            post_github_status "failure" "ci/ragtime/test" "‚ùå Tests failed" "$LOGS_URL"
            exit 1
          fi
        else
          echo "No tests configured yet - will be added in future issues"
          post_github_status "success" "ci/ragtime/test" "‚ö†Ô∏è Tests not configured (skipped)" "$LOGS_URL"
        fi
      
      # Validate CDK app if it exists
      - post_github_status "pending" "ci/ragtime/cdk-synth" "üèóÔ∏è Validating CDK application..." "$LOGS_URL"
      - |
        if [ -f "cdk.json" ] || [ -f "infrastructure/cdk.json" ]; then
          echo "Validating CDK application..."
          echo "Building TypeScript first..."
          if npm run build; then
            echo "‚úÖ TypeScript compilation successful"
          else
            post_github_status "failure" "ci/ragtime/cdk-synth" "‚ùå TypeScript compilation failed" "$LOGS_URL"
            exit 1
          fi
          
          if cdk synth --quiet; then
            echo "‚úÖ CDK synthesis successful"
            post_github_status "success" "ci/ragtime/cdk-synth" "‚úÖ CDK validation passed" "$LOGS_URL"
          else
            post_github_status "failure" "ci/ragtime/cdk-synth" "‚ùå CDK synthesis failed" "$LOGS_URL"
            exit 1
          fi
        else
          echo "No CDK app found yet - this will be created in future issues"
          post_github_status "success" "ci/ragtime/cdk-synth" "‚ö†Ô∏è CDK validation skipped (no app found)" "$LOGS_URL"
        fi
      
      # Report pre-build phase success
      - post_github_status "success" "ci/ragtime/pre-build" "‚úÖ Pre-build validations completed" "$LOGS_URL"
      
  build:
    commands:
      # Start build phase reporting
      - post_github_status "pending" "ci/ragtime/build" "üî® Building application..." "$LOGS_URL"
      
      - echo "Build phase - building CDK application..."
      - echo "CodeBuild pipeline infrastructure validated on `date`"
      
      # Build CDK app and all components
      - |
        if [ -f "package.json" ]; then
          echo "Building all components..."
          if npm run build; then
            echo "‚úÖ Build successful"
            post_github_status "success" "ci/ragtime/build" "‚úÖ Application built successfully" "$LOGS_URL"
          else
            echo "‚ùå Build failed"
            post_github_status "failure" "ci/ragtime/build" "‚ùå Build failed" "$LOGS_URL"
            exit 1
          fi
        else
          echo "No build script configured yet"
          post_github_status "success" "ci/ragtime/build" "‚ö†Ô∏è Build skipped (no script configured)" "$LOGS_URL"
        fi
      
      # Compile TypeScript for CDK app
      - |
        if [ -f "tsconfig.json" ] || [ -f "infrastructure/tsconfig.json" ]; then
          echo "Compiling TypeScript..."
          if npx tsc; then
            echo "‚úÖ TypeScript compilation successful"
          else
            echo "‚ùå TypeScript compilation failed"
            post_github_status "failure" "ci/ragtime/build" "‚ùå TypeScript compilation failed" "$LOGS_URL"
            exit 1
          fi
        fi

  post_build:
    commands:
      # Start deployment phase reporting
      - post_github_status "pending" "ci/ragtime/deploy" "üöÄ Deploying infrastructure..." "$LOGS_URL"
      
      - echo "Post-build deployment phase started..."
      - echo "Deployment started on `date`"
      
      # Set up AWS environment variables
      - echo "Setting AWS environment variables for deployment..."
      - export AWS_DEFAULT_REGION=$AWS_REGION
      - echo "AWS Region $AWS_DEFAULT_REGION"
      
      # Clear any conflicting AWS environment variables
      - unset AWS_PROFILE
      - export AWS_EC2_METADATA_DISABLED=false
      - export AWS_SDK_LOAD_CONFIG=1
      
      # Configure AWS CLI for consistent credential access
      - aws configure set default.region $AWS_DEFAULT_REGION
      - aws configure set default.output json
      
      # Bootstrap CDK with explicit account and region
      - echo "Bootstrapping CDK if needed..."
      - post_github_status "pending" "ci/ragtime/bootstrap" "üîß Bootstrapping CDK environment..." "$LOGS_URL"
      - |
        if cdk bootstrap aws://$CDK_DEFAULT_ACCOUNT/$AWS_DEFAULT_REGION --require-approval never; then
          echo "‚úÖ CDK bootstrap successful"
          post_github_status "success" "ci/ragtime/bootstrap" "‚úÖ CDK environment ready" "$LOGS_URL"
        else
          echo "‚ùå CDK bootstrap failed"
          post_github_status "failure" "ci/ragtime/bootstrap" "‚ùå CDK bootstrap failed" "$LOGS_URL"
          exit 1
        fi
      
      # Deploy CDK stack if app exists
      - |
        if [ -f "cdk.json" ] || [ -f "infrastructure/cdk.json" ]; then
          echo "Deploying RagTime CDK stack..."
          post_github_status "pending" "ci/ragtime/infrastructure" "üèóÔ∏è Deploying infrastructure stack..." "$LOGS_URL"
          
          # Check and handle stack state before deployment
          STACK_NAME="RagTimeInfrastructure-$DEPLOYMENT_ENVIRONMENT"
          echo "Deploying stack: $STACK_NAME"
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")
          echo "Stack status: $STACK_STATUS"
          
          if [[ "$STACK_STATUS" == *"ROLLBACK"* ]]; then
            echo "Stack is in rollback state, deleting and recreating..."
            post_github_status "pending" "ci/ragtime/infrastructure" "üîÑ Cleaning up failed stack..." "$LOGS_URL"
            aws cloudformation delete-stack --stack-name $STACK_NAME
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME
            echo "Stack deleted successfully"
          elif [[ "$STACK_STATUS" == *"PROGRESS"* ]]; then
            echo "Stack operation in progress, waiting for completion..."
            sleep 60
          fi
          
          # Deploy the CDK stack
          echo "Starting CDK deployment..."
          if cdk deploy RagTimeInfrastructure-$DEPLOYMENT_ENVIRONMENT --require-approval never --verbose; then
            echo "‚úÖ Infrastructure deployment successful"
            
            # Get stack status and resources
            FINAL_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].StackStatus' --output text)
            echo "Final stack status: $FINAL_STATUS"
            
            # Get CloudFormation console URL
            CF_URL="https://console.aws.amazon.com/cloudformation/home?region=$AWS_DEFAULT_REGION#/stacks/stackinfo?stackId=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].StackId' --output text | sed 's/.*\///')"
            
            if [[ "$FINAL_STATUS" == "CREATE_COMPLETE" ]] || [[ "$FINAL_STATUS" == "UPDATE_COMPLETE" ]]; then
              post_github_status "success" "ci/ragtime/infrastructure" "‚úÖ Infrastructure deployed: $FINAL_STATUS" "$CF_URL"
            else
              post_github_status "failure" "ci/ragtime/infrastructure" "‚ùå Infrastructure deployment failed: $FINAL_STATUS" "$CF_URL"
              exit 1
            fi
          else
            echo "‚ùå Infrastructure deployment failed"
            post_github_status "failure" "ci/ragtime/infrastructure" "‚ùå CDK deployment failed" "$LOGS_URL"
            exit 1
          fi
          
        else
          echo "No CDK app found - deployment will be enabled when CDK app is added in issue #2"
          post_github_status "success" "ci/ragtime/infrastructure" "‚ö†Ô∏è Infrastructure deployment skipped (no CDK app)" "$LOGS_URL"
        fi
      
      # Output deployment information and final status
      - echo "=== DEPLOYMENT SUMMARY ==="
      - echo "Environment Infrastructure Foundation"
      - echo "Region $AWS_DEFAULT_REGION"
      - echo "Build ID $CODEBUILD_BUILD_ID"
      - |
        if [ -f "cdk.json" ] || [ -f "infrastructure/cdk.json" ]; then
          STACK_NAME="RagTimeInfrastructure-$DEPLOYMENT_ENVIRONMENT"
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo 'NO_STACK_YET')
          echo "Stack Status: $STACK_STATUS"
          
          # List deployed resources
          if [[ "$STACK_STATUS" == "CREATE_COMPLETE" ]] || [[ "$STACK_STATUS" == "UPDATE_COMPLETE" ]]; then
            echo "=== DEPLOYED RESOURCES ==="
            aws cloudformation describe-stack-resources --stack-name $STACK_NAME --query 'StackResources[?ResourceStatus==`CREATE_COMPLETE` || ResourceStatus==`UPDATE_COMPLETE`].[ResourceType,LogicalResourceId,ResourceStatus]' --output table || echo "Could not retrieve resource list"
          fi
        fi
      - echo "CodeBuild pipeline deployed successfully on $(date)"
      
      # Post final success status
      - post_github_status "success" "ci/ragtime/deploy" "‚úÖ Deployment completed successfully" "$LOGS_URL"
      - |
        # Create summary comment if this is a PR
        if [ -n "$GITHUB_TOKEN" ] && [ -n "$CODEBUILD_SOURCE_VERSION" ] && [[ "$CODEBUILD_WEBHOOK_EVENT" == "PULL_REQUEST"* ]]; then
          echo "Creating deployment summary comment..."
          
          # Get PR number from webhook payload
          PR_NUMBER=$(echo "$CODEBUILD_WEBHOOK_PULL_REQUEST_NUMBER" || echo "")
          
          if [ -n "$PR_NUMBER" ]; then
            SUMMARY="## üöÄ Deployment Summary
            
**Build ID:** \`$CODEBUILD_BUILD_ID\`
**Environment:** \`$DEPLOYMENT_ENVIRONMENT\`
**Region:** \`$AWS_DEFAULT_REGION\`
**Duration:** Build completed at \`$(date)\`

### ‚úÖ Deployment Status
- **Install Phase:** ‚úÖ Dependencies installed
- **Pre-build Phase:** ‚úÖ Validations passed (lint, test, CDK synth)
- **Build Phase:** ‚úÖ Application built successfully
- **Deploy Phase:** ‚úÖ Infrastructure deployed

### üìä Infrastructure Status
$(if [ -f "cdk.json" ]; then
  STACK_NAME="RagTimeInfrastructure-$DEPLOYMENT_ENVIRONMENT"
  STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo 'NO_STACK')
  echo "- **Stack:** \`$STACK_NAME\` - \`$STACK_STATUS\`"
  
  if [[ "$STACK_STATUS" == "CREATE_COMPLETE" ]] || [[ "$STACK_STATUS" == "UPDATE_COMPLETE" ]]; then
    echo "- **Resources:** Deployed successfully"
    echo "- **Console:** [View Stack](https://console.aws.amazon.com/cloudformation/home?region=$AWS_DEFAULT_REGION#/stacks)"
  fi
else
  echo "- **Stack:** CDK app not found (skipped)"
fi)

### üîó Links
- [CloudWatch Logs]($LOGS_URL)
- [CodeBuild Console](https://console.aws.amazon.com/codesuite/codebuild/projects/ragtime-pipeline)
- [CloudFormation Console](https://console.aws.amazon.com/cloudformation/home?region=$AWS_DEFAULT_REGION)

---
*ü§ñ Generated by RagTime CI/CD Pipeline*"
            
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$GITHUB_REPO/issues/$PR_NUMBER/comments" \
              -d "{\"body\": $(echo "$SUMMARY" | jq -R -s .)}" || echo "Failed to post summary comment"
          fi
        fi

artifacts:
  files:
    - '**/*'
  name: ragtime-build-$(date +%Y-%m-%d-%H-%M-%S)
  exclude-paths:
    - 'node_modules/**/*'
    - '.git/**/*'
    - 'cdk.out/**/*'

cache:
  paths:
    - node_modules/**/*
    - ~/.npm/**/*
    - ~/.cache/pip/**/*

reports:
  test_reports:
    files:
      - 'test-results.xml'
    file-format: 'JUNITXML'
    base-directory: '.'